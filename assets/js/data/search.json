[ { "title": "Node js web crawling with puppeteer and cheerio", "url": "/posts/how-to-use-puppeteer/", "categories": "Typescript, Javascript", "tags": "typescript, node, javascript", "date": "2022-06-17 23:36:00 -0400", "snippet": "OverviewFor Node js, there are two ways to scrap the web pages. One is puppeteer and the other way is cheerio. Both way has their own advantage and disadvantage. Some developers including me uses both libraries for wb web crawling.What is different between cheerio and puppeteer| | Cheerio | Puppeteer ||:————|:———–|:————-|| interaction | Dom phaser | Good for SPA || interaction | Impossible | possible || Syntax | Simple | Complex || headless | true | false |How to useWe will try to phase the Amazon for exampleCombinationThis example will handle both libraries together.import puppeteer from 'puppeteer'import $ from 'cheerio'const test = async () =&gt; { try { const browser = await puppeteer.launch() const page = await browser.newPage() await page.goto('https://www.amazon.ca', { waitUntil: 'networkidle2' }) /* Search with input */ await page.waitForSelector('#twotabsearchtextbox') // Add input data to serach input field await page.$eval('#twotabsearchtextbox', el =&gt; (el as HTMLInputElement).value = 'silent red switches') // Press search button await page.click('#nav-search-submit-button') await page.waitForNavigation({ waitUntil: 'networkidle2' }) // Screen shot the pages await page.screenshot({ path: 'example.png' }) // Get the page DOM const pageHTML = await page.evaluate(() =&gt; document.body.innerHTML) // Use Cheerio to phaser DOM const result: Record&lt;string, any&gt;[] = [] $('div[data-component-type=\"s-search-result\"]', pageHTML).each((i, el) =&gt; { // Get price symbol const priceSymbol = $(el).find('.a-price-symbol').text() // Get sale and original price const foundPriceWhole = $(el).find('.a-offscreen') const priceWhole = foundPriceWhole.length &gt;= 2 ? foundPriceWhole.last().text() : '' const salePriceWhole = foundPriceWhole.length &gt;= 2 ? foundPriceWhole.first().text() : foundPriceWhole.text() // Get the tile const title = $(el).find('[class=\"a-size-base-plus a-color-base a-text-normal\"]').text() result.push({ title, priceSymbol, salePriceWhole, priceWhole, }) }) // Close the brower await browser.close() } catch (e) { console.error(e) console.error('Fail!', e.message) process.exit(1) }}test()ImportantYou are not allowed to scrap all webSites for security. You are only allow to scrap that mentioned on “robots.txt”# robots.txt file for YouTube# Created in the distant future (the year 2000) after# the robotic uprising of the mid 90's which wiped out all humans.User-agent: Mediapartners-Google*Disallow:User-agent: *Disallow: /channel/*/communityDisallow: /commentDisallow: /get_videoDisallow: /get_video_infoDisallow: /get_midroll_infoDisallow: /live_chatDisallow: /loginDisallow: /resultsDisallow: /signupDisallow: /t/termsDisallow: /timedtext_videoDisallow: /user/*/communityDisallow: /verify_ageDisallow: /watch_ajaxDisallow: /watch_fragments_ajaxDisallow: /watch_popupDisallow: /watch_queue_ajaxSitemap: https://www.youtube.com/sitemaps/sitemap.xmlSitemap: https://www.youtube.com/product/sitemap.xmlThis robots.txt are from Youtube. You are not allowed to scrap the page on “Disallow”. That means it’s possible to scrap all pages except themHow to check robots.txtIt’s very simple to check them. just add /robots.txt at the last the url you would like to pharseExample) https://www.example.com/robots.txtSupportUpdates[06-18-2022] Add image" }, { "title": "Getting started Vite + Typescript + Electron + Vue 3", "url": "/posts/vite-typescript-electron/", "categories": "Typescript, vite, Electron, Vue", "tags": "typescript, vite, getting started, electron, vue", "date": "2022-06-08 23:36:00 -0400", "snippet": "Electron is cross-platform apps. It supports many operating system desktop application such as window, linux and Mac If you would like to know more, check the Official website.Getting Started on developmentIn this post, I will use the Vue 3. However, you are able to replace to vue to others like reactStep 1 - Start projectIf you want to see the official document, click the following linkyarn create vite my-first-electron --template vue-tsStep 2 - Add dependenciesWe will download some dependencies for running electronStep 2.1 - Download electronyarn add -D electron electron-builder @types/electronyarn add electron-is-dev electron: electron module electron-builder: build helper for electron @types/electron: types of electron electron-is-dev: Check electron is dev modeStep 2.2 - Download developing and buildingyarn add -D concurrently cross-env wait-on concurrently: Run multiple process, we will use it for dev cross-env: Change env option, we will use it for dev and build wait-on: Wait process until something finish, we will use it for devStep 3 - Change configvite.config.tsimport { defineConfig } from 'vite'import vue from '@vitejs/plugin-vue'export default defineConfig({ base: process.env.IS_DEV !== 'true' ? './' : '/', plugins: [vue()], build: { outDir: './dist/vue' }})Note we will put the electron and vue file separately for build base should be different dev and buildpackage.json{ ... \"main\": \"./dist/app/main.js\", \"scripts\": { \"dev\": \"vite\", \"build\": \"vue-tsc --noEmit &amp;&amp; vite build\", \"build:watch\": \"vite build --watch\", \"preview\": \"vite preview\", \"electron:build\": \"tsc -p src/main/tsconfig.json\", \"electron:dev\": \"concurrently -k \\\"yarn dev\\\" \\\"yarn electron:build &amp;&amp; yarn electron . \\\"\", \"electron:build-watch\": \"concurrently -k \\\"yarn build:watch\\\" \\\"yarn electron:build &amp;&amp; yarn electron . \\\"\", \"app:build\": \"cross-env ELECTRON=true &amp;&amp; yarn build &amp;&amp; yarn electron:build &amp;&amp; electron-builder\", \"app:publish\": \"yarn electron:build &amp;&amp; yarn build:for:electron &amp;&amp; yarn electron:builder-publish\", ... }}Note Add the “main” key for electron . “app:publish” is for publishing to the Github with tagstsconfig.json{ \"compilerOptions\": { \"target\": \"esnext\", \"useDefineForClassFields\": true, \"module\": \"esnext\", \"moduleResolution\": \"node\", \"strict\": true, \"jsx\": \"preserve\", \"sourceMap\": true, \"resolveJsonModule\": true, \"isolatedModules\": true, \"esModuleInterop\": true, \"lib\": [\"esnext\", \"dom\"], \"skipLibCheck\": true }, \"include\": [\"src/renderer/**/*.ts\", \"src/renderer/**/*.d.ts\", \"src/renderer/**/*.tsx\", \"src/renderer/**/*.vue\"], \"exclude\": [\"src/main/**/*.ts\", \"src/main/**/*.d.ts\"], \"references\": [{ \"path\": \"./tsconfig.node.json\" }]}Step 4 - Add electron fileMove all fies relative with vue under src/renderer. We will handle electron and vue files separately. Make the directory named “main” under src, and then create tsconfig.json and main.ts detach following codes on proper filetsconfig.json{ \"compilerOptions\": { \"target\": \"esnext\", \"useDefineForClassFields\": true, \"module\": \"esnext\", \"moduleResolution\": \"node\", \"strict\": true, \"jsx\": \"preserve\", \"sourceMap\": true, \"resolveJsonModule\": true, \"isolatedModules\": true, \"esModuleInterop\": true, \"lib\": [\"esnext\", \"dom\"], \"skipLibCheck\": true }, \"include\": [\"src/renderer/**/*.ts\", \"src/renderer/**/*.d.ts\", \"src/renderer/**/*.tsx\", \"src/renderer/**/*.vue\"], \"exclude\": [\"src/main/**/*.ts\", \"src/main/**/*.d.ts\"], \"references\": [{ \"path\": \"./tsconfig.node.json\" }]}main.tsimport { app, BrowserWindow } from 'electron'import isDev from 'electron-is-dev'import path from 'path'let appWindow: BrowserWindow | undefinedconst createWindow = () =&gt; { // Create the browser window. appWindow = new BrowserWindow({ width: 1280, height: 720, webPreferences: { nodeIntegration: true } }) appWindow.loadURL(isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, '../vue/index.html')}`) appWindow.webContents.openDevTools()}app.whenReady() .then(async () =&gt; { createWindow() app.on('activate', () =&gt; { if (!BrowserWindow.getAllWindows().length) { createWindow() } }) })/* When app is ready to open */app.on('ready', () =&gt; { console.log('App is ready to start')})app.on('window-all-closed', () =&gt; { if (process.platform !== 'darwin') { app.quit() }})Note We will load different file or url based on dev mode.Step 4 - run on developmentyarn electron:devYour app will be opened automaticallyBuild your appStep 1 - change package.jsonAdd following code in package.json\"build\": { \"appId\": \"com.my-website.my-frist-electron\", \"productName\": \"My-first-electron\", \"copyright\": \"Copyright © 2022 ${author}\", \"publish\": [ { \"provider\": \"github\", \"owner\": \"kkan0615\", \"repo\": \"my-personal-manger\" } ], \"mac\": { \"category\": \"public.app-category.utilities\" }, \"win\": { \"publish\": [ \"github\" ], \"target\": [ \"zip\", \"nsis\" ] }, \"nsis\": { \"oneClick\": false, \"allowToChangeInstallationDirectory\": true }, \"files\": [ \"dist/**/*\", \"src/main/**/*\" ], \"directories\": { \"buildResources\": \"assets\", \"output\": \"dist_electron\" } },Step 2 - run the codeyarn electron:buildAfter some minutes, you can see dist_electron under your project.ConclusionI try to make the electron app in easy way. Enjoy your electron code world!References https://github.com/lod61/reminder-app https://dev.to/brojenuel/vite-vue-3-electron-5h4o https://dev.to/olyno/how-to-create-an-electron-application-with-vite-imSupport" }, { "title": "How to publish vue3 typescript component with vite on NPM", "url": "/posts/how-to-publish-vue3-typescript-with-vite/", "categories": "Vue3, Typescript, Skills, vite, npm", "tags": "vue3, typescript, skill, vite, npm", "date": "2022-06-02 00:05:00 -0400", "snippet": "Let’s create componentStep 1 - Start new project with viteHere is the official vite website linkyarn create vite [project-name] --template vue-tsMy post will use typescript, so you have to use “vue-ts” Step 2 - Make empty main.ts, change the name, and make a code.Change the main.ts to index.ts (if you keep the name main.ts, you can do it. Just change index.ts to main.ts in vite config later) // index.ts (main.ts)import [your component name] from './App.vue'export default [your component name]Step 3 - Write down&lt;template&gt; &lt;div :style=\"{ height: height, width: width, }\" &gt; test &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=\"ts\"&gt;const props = defineProps({ height: { type: String, required: false, default: '600px', }, width: { type: String, required: false, default: '1024px', },})&lt;/script&gt;Testing before publishIn component projectnpm linkIn new projectCreate new project for testing locally with same way used to start component project. In new project, type following code.npm link [project-name]From now on, you can test your component in new project. In local test, you can’t see any type of component. However when you publish you will be able to see types.PublishStep 1 - BuildBefore you publish you have change vite.config.ts, package.jsonvite.config.tsYou have to download “rollup-plugin-typescript2” (link) to generate types for your .vue file You also have to change build option. Look at this link.import { defineConfig } from 'vite'import * as path from 'path'import vue from '@vitejs/plugin-vue'import typescript2 from 'rollup-plugin-typescript2'import { fileURLToPath } from 'url'// https://vitejs.dev/config/export default defineConfig({ plugins: [ vue(), // Generate types for components typescript2({ check: false, include: ['src/**/*.vue'], tsconfigOverride: { compilerOptions: { sourceMap: true, declaration: true, declarationMap: true, } }, exclude: [ 'vite.config.ts' ] }) ], build: { cssCodeSplit: false, lib: { entry: path.resolve(__dirname, 'src/index.ts'), // or main.ts name: [projectName], fileName: (format) =&gt; `[project-name].${format}.js` }, rollupOptions: { // make sure to externalize deps that shouldn't be bundled // into your library external: ['vue'], output: { // Provide global variables to use in the UMD build // for externalized deps globals: { vue: 'Vue' } } } },})Change all “[project-name]” and [projectName] to your custom namePackage.json{... \"name\": [project-name], \"files\": [ \"dist\" ], \"version\": [version], \"author\": [author], \"description\": [description], \"repository\": [repository link], \"license\": \"MIT\", \"main\": \"./dist/[project-name].umd.js\", \"module\": \"./dist/[project-name].es.js\", \"types\": \"./dist/App.vue.d.ts\", \"exports\": { \".\": { \"import\": \"./dist/[project-name].es.js\", \"require\": \"./dist/[project-name].umd.js\" }, \"./dist/style.css\": \"./dist/style.css\", \"./dist/index.d.ts\": \"./dist/index.d.ts\" }, ...}Note Change all “[project-name]” to your custom name Name must be unique, this means your project name must not be published on NPM. If you don’t have github Repository, repository link can be empty.After you change vite.config.ts and package.json, build your code!yarn buildAfter build, you can get at least App.vue.d.ts, es.js, and umd.js file.Step 2 - Publish!Login to NPMnpm loginNoteIf you don’t have account, please sign up NPM firstPublishnpm publishNoteWhenever you publish, change the version in package.json.ConclusionAfter you are success to publish, check the TS mark on the top.Support" }, { "title": "How to add custom function to prototype with typescript", "url": "/posts/how-to-add-custom-function-to-prototype-in-typescript/", "categories": "Typescript, Skills", "tags": "typescript, skill", "date": "2021-07-12 08:56:00 -0400", "snippet": "OverviewThis example is tested on vue + typescript. However, it’s not big different with others.Step 1 - Create .ts fileCreate typescript file. In the example, array.ts is createdStep 2 - Dive into codeinterface Array&lt;T&gt; { removeOne(o: T): Array&lt;T&gt;}if (typeof Array.prototype.removeOne !== 'function') { /** * Remove target data * @param o - target data * @return Spliced Array */ Array.prototype.removeOne = function (o) { return this.splice(this.indexOf(o), 1) }}Exchange to javascript Array.prototype.removeOne = function (o) { return this.splice(this.indexOf(o), 1) }You have to use function instead of the arrow function to use “this” in the function. This points out target arrayStep 3 - import to your indeximport the file to your main or index file. In the example, i imported to main.ts// .../* Utils prototype */import '@/utils/array'// ...Step 4 - use them!If you can search on IDE intelligence, you are success to access!// Just use without any import![1,2,3].removeOne(2)ConclusionIf you follow all the steps well, you can" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-03 18:32:00 -0500", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to setup your account on Google analytics. While your create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to setup your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to creating your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml filegoogle_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pickup your changes. You should now be able to monitor your traffic in realtime.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add a entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from you App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7 __author__ = 'pete.frisella@gmail.com (Pete Frisella)' # OAuth 2.0 Client Settings AUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' ) } # XSRF Settings XSRF_KEY = 'OnceUponATimeThereLivedALegend' Tip: You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com. But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deploy Services to deploy: descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml] source: [/tmp/google-analytics-super-proxy/src] target project: [chirpy-test-XXXX] target service: [default] target version: [VESRION_NUM] target url: [https://chirpy-test-XXXX.ue.r.appspot.com] Do you want to continue (Y/n)? Y Beginning deployment of service [default]... ╔════════════════════════════════════════════════════════════╗ ╠═ Uploading 1 file to Google Cloud Storage ═╣ ╚════════════════════════════════════════════════════════════╝ File upload done. Updating service [default]...done. Setting traffic split for service [default]...done. Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com] You can stream logs from the command line by running: $ gcloud app logs tail -s default To view your application in the web browser run: $ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page, and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-10 12:34:00 -0400", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may need to replace them with your own. The following sections will guide you how to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestNow, copy the remaining image files (PNG and ICO) to cover the original files in the folder assets/img/favicons/ of your Jekyll site.The following table will helps you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ browserconfig.xml ✗ ✓ site.webmanifest ✗ ✓ Note: ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 08:55:00 -0400", "snippet": "PrerequisitesFollow the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll and Bundler.InstallationThere are two ways to get the theme: Install from RubyGems - Easy to update, isolate irrelevant project files so you can focus on writing. Fork on GitHub - Convenient for custom development, but difficult to update, only suitable for web developers.Installing the Theme GemAdd this line to your Jekyll site’s Gemfile:gem \"jekyll-theme-chirpy\"And add this line to your Jekyll site’s _config.yml:theme: jekyll-theme-chirpyAnd then execute:$ bundleFinally, copy the required files from the theme’s gem (for detailed files, see starter project) to your Jekyll site. Hint: To locate the installed theme’s gem, execute: $ bundle info --path jekyll-theme-chirpy Or you can use the starter template to create a Jekyll site to save time copying files from the theme’s gem. We have prepared everything for you there!Fork on GitHubFork Chirpy on GitHub and then clone your fork to local. (Please note that the default branch code is in development. If you want the blog to be stable, please switch to the latest tag and start writing.)Install gem dependencies by:$ bundleAnd then execute:$ bash tools/init.sh Note: If you don’t plan to deploy your site on GitHub Pages, append parameter option --no-gh at the end of the above command.What it does is: Remove some files or directories from your repository: .travis.yml files under _posts folder docs If you use the --no-gh option, the directory .github will be deleted. Otherwise, setup the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Automatically create a commit to save the changes.UsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langRunning Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveOpen a browser and visit to http://localhost:4000.DeploymentBefore the deployment begins, checkout the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starting with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy on GitHub PagesFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GH Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the workflow file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/test.sh and tools/deploy.sh. Otherwise, copy them from this repo to your Jekyll site.And then rename your repository to &lt;GH-USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repo’s landing page on GitHub and select the branch gh-pages as the publishing source through Settings → Options → GitHub Pages: Visit your website at the address indicated by GitHub. Deploy on Other PlatformsOn platforms other than GitHub, we cannot enjoy the convenience of GitHub Actions. Therefore, we should build the site locally (or on some other 3rd-party CI platform) and then put the site files on the server.Go to the root of the source project, build your site by:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site with Docker by:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to your web server." }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 02:10:00 -0400", "snippet": "Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts/ of the root directory. Please note that the EXTENSION must be one of md and markdown.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- Note: The posts’ layout has been set to post by default, so there is no need to add the variable layout in Front Matter block.Timezone of dateIn order to accurately record the release date of a post, you should not only setup the timezone of _config.yml but also provide the the post’s timezone in field date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post is designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:categories: [Animal, Insect]tags: [bee]Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for specific post, add the following to post’s Front Matter:---toc: false---CommentsSimilar to TOC, the Disqus comments is loaded by default in each post, and the global switch is defined by variable comments in file _config.yml . If you want to close the comment for specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown language: surround the graph code with ```mermaid and ```.ImagesPreview imageIf you want to add an image to the top of the post contents, specify the url and alt attribute for the image:---image: src: /path/to/image/file alt: image alternative text---Image captionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_Image sizeYou can specify the width (and height) of a image with width:![Desktop View](/assets/img/sample/mockup.png){: width=\"400\"}Image positionBy default, the image is centered, but you can specify the position by using one of class normal , left and right. For example: Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal} Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left} Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right} Limitation: Once you specify the position of an image, it is forbidden to add the image caption.Image shadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow}CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN url by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN url will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---Code BlockMarkdown symbols ``` can easily create a code block as following examples.This is a common code snippet, without syntax highlight and line number.Specific LanguageUsing ```language you will get code snippets with line numbers and syntax highlight. Note: The Jekyll style {% highlight LANGUAGE %} or {% highlight LANGUAGE linenos %} are not allowed to be used in this theme !# Yaml code snippetitems: - part_no: A4786 descrip: Water Bucket (Filled) price: 1.47 quantity: 4Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %} .{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-07 23:33:00 -0400", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line to shows the Block Quote.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Specify width400px image width Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashRubydef sum_eq_n?(arr, n) return true if arr.empty? &amp;&amp; n == 0 arr.product(arr).reject { |a,b| a == b }.any? { |a,b| a + b == n }endShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}Javaprivate void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { // Write out any hidden serialization magic s.defaultWriteObject(); for (E e: map.keySet()) s.writeObject(e);}Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
